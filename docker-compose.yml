version: '3.8'

services:
  # Flask Web UI
  web:
    build:
      context: .
      dockerfile: dockerfiles/web.Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./config.json:/app/config.json
    environment:
      - FLASK_ENV=production
      - API_URL=${API_URL}
      - REQUEST_INTERVAL=${REQUEST_INTERVAL}
      - FAILURE_RATE=${FAILURE_RATE}
      - FAILURE_MODES=${FAILURE_MODES}
    networks:
      - azure-request-manager
    restart: unless-stopped

  # Request Generator with Prometheus metrics
  requester:
    build:
      context: .
      dockerfile: dockerfiles/requester.Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./config.json:/app/config.json
      - ./logs:/app/logs
    environment:
      - API_URL=${API_URL}
      - REQUEST_INTERVAL=${REQUEST_INTERVAL}
      - FAILURE_RATE=${FAILURE_RATE}
      - FAILURE_MODES=${FAILURE_MODES}
    networks:
      - azure-request-manager
    restart: unless-stopped

  # Black code formatter service
  black:
    image: python:3.9-slim
    volumes:
      - ./:/app
    working_dir: /app
    command: bash -c "pip install black && black --line-length 88 --target-version py39 --exclude '/(\.git|\.venv|venv|env)/' /app/ --force-exclude '/app/node_modules/' --safe"
    networks:
      - azure-request-manager

  # Ruff linter service
  ruff:
    image: python:3.9-slim
    volumes:
      - ./:/app
    working_dir: /app
    command: bash -c "pip install ruff && ruff check --fix /app"
    networks:
      - azure-request-manager

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - azure-request-manager
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - azure-request-manager
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  azure-request-manager:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: