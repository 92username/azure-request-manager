import streamlit as st

# ConfiguraÃ§Ã£o da pÃ¡gina
st.set_page_config(page_title="Azure Request Manager", layout="wide")

# Menu lateral
st.sidebar.title("ğŸ”§ Azure Request Manager")
page = st.sidebar.radio("Navegar", ["ConfiguraÃ§Ã£o", "ExecuÃ§Ã£o", "Logs", "Status"])

# PÃ¡gina: ConfiguraÃ§Ã£o
if page == "ConfiguraÃ§Ã£o":
    st.title("ğŸ”§ ConfiguraÃ§Ã£o de RequisiÃ§Ãµes")

    freq = st.slider("FrequÃªncia das requisiÃ§Ãµes (em segundos)", 5, 60, 10)
    rota = st.selectbox("Rota da Azure API", [
        "/api/v1/event",
        "/api/v1/users",
        "/api/v1/status/200",
        "/api/v1/delay/3"
    ])
    simular_erro = st.checkbox("Simular erro intencional?")

    st.session_state["config"] = {
        "freq": freq,
        "rota": rota,
        "erro": simular_erro
    }

    st.success("ConfiguraÃ§Ã£o salva em sessÃ£o.")

# PÃ¡gina: ExecuÃ§Ã£o
elif page == "ExecuÃ§Ã£o":
    st.title("ğŸš€ ExecuÃ§Ã£o das RequisiÃ§Ãµes")

    config = st.session_state.get("config", None)

    if config:
        st.write("**ConfiguraÃ§Ã£o atual:**")
        st.json(config)

        if st.button("Iniciar requisiÃ§Ãµes"):
            st.warning("Envio de requisiÃ§Ãµes em breve... (mÃ³dulo em desenvolvimento)")
    else:
        st.info("Configure os parÃ¢metros antes de iniciar.")

# PÃ¡gina: Logs
elif page == "Logs":
    st.title("ğŸ“œ Visualizar Logs")
    st.info("Logs recentes aparecerÃ£o aqui quando implementados.")

# PÃ¡gina: Status
elif page == "Status":
    st.title("ğŸ“ˆ Status da API na Azure")
    st.info("Aqui serÃ¡ exibido se a API estÃ¡ online ou offline.")
