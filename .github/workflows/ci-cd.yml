name: Azure Request Manager CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Test with pytest
        run: |
          # Run tests if they exist
          if [ -d tests ]; then
            pytest tests/ --cov=./ --cov-report=xml
          else
            echo "No tests found. Skipping test step."
          fi

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build Docker images
        run: |
          docker-compose build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v2
      
      # Example deployment to Azure VM using SSH
      # Uncomment and configure with your Azure VM details
      # - name: Deploy to Azure VM
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.AZURE_VM_HOST }}
      #     username: ${{ secrets.AZURE_VM_USERNAME }}
      #     key: ${{ secrets.AZURE_VM_SSH_KEY }}
      #     script: |
      #       cd /path/to/deployment
      #       git pull
      #       docker-compose down
      #       docker-compose up -d
      
      # Alternatively, you can use Azure CLI for deployment
      # - name: Login to Azure
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}
      # - name: Deploy to Azure
      #   run: |
      #     az vm run-command invoke --resource-group myResourceGroup --name myVM --command-id RunShellScript --scripts "cd /path/to/deployment && docker-compose pull && docker-compose up -d"
      
      - name: Deployment placeholder
        run: |
          echo "Deployment would happen here in a real environment"
          echo "Configure the commented sections above with your Azure VM details"