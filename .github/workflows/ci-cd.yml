name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  lint-format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install from requirements.txt which now includes ruff and black
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Check formatting with Black
        run: |
          black --check .
      - name: Lint with Ruff
        run: |
          ruff check .

  test:
    needs: lint-format-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Create .env file for testing
        run: |
          echo "API_URL=${{ secrets.API_URL || 'https://example.com/api' }}" >> .env
          echo "REQUEST_INTERVAL=${{ secrets.REQUEST_INTERVAL || '30' }}" >> .env
          echo "FAILURE_RATE=${{ secrets.FAILURE_RATE || '10' }}" >> .env
          echo "FAILURE_MODES=${{ secrets.FAILURE_MODES || 'timeout,500' }}" >> .env
      - name: Test with pytest
        run: |
          # Run tests if they exist
          if [ -d tests ]; then
            pytest tests/ --cov=./ --cov-report=xml
          else
            echo "No tests found. Skipping test step."
          fi

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Create .env file for docker-compose
        run: |
          echo "API_URL=${{ secrets.API_URL || 'https://example.com/api' }}" >> .env
          echo "REQUEST_INTERVAL=${{ secrets.REQUEST_INTERVAL || '30' }}" >> .env
          echo "FAILURE_RATE=${{ secrets.FAILURE_RATE || '10' }}" >> .env
          echo "FAILURE_MODES=${{ secrets.FAILURE_MODES || 'timeout,500' }}" >> .env
          echo "GRAFANA_ADMIN_USER=${{ secrets.GRAFANA_ADMIN_USER || 'admin' }}" >> .env
          echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD || 'admin' }}" >> .env
      - name: Build Docker images
        run: |
          docker-compose build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      # Exemplo de implantação em uma VM Azure usando SSH
      - name: Deploy to Azure VM
        if: ${{ secrets.AZURE_VM_HOST != '' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script_stop: true
          envs: GITHUB_SHA
          script: |
            cd /opt/azure-request-manager
            git pull
            echo "API_URL=${{ secrets.API_URL }}" >> .env
            echo "REQUEST_INTERVAL=${{ secrets.REQUEST_INTERVAL }}" >> .env
            echo "FAILURE_RATE=${{ secrets.FAILURE_RATE }}" >> .env
            echo "FAILURE_MODES=${{ secrets.FAILURE_MODES }}" >> .env
            echo "GRAFANA_ADMIN_USER=${{ secrets.GRAFANA_ADMIN_USER }}" >> .env
            echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" >> .env
            docker-compose down
            docker-compose up -d
      
      - name: Deployment placeholder
        if: ${{ secrets.AZURE_VM_HOST == '' }}
        run: |
          echo "Deployment configurado, mas os secrets necessários não estão definidos no GitHub"
          echo "Configure os secrets AZURE_VM_HOST, AZURE_VM_USERNAME e AZURE_VM_SSH_KEY para ativar a implantação automática"